<template>
    <div class='view' id='page-elements-view'>
        <div class='element' id='page-elements-view_element'>
            <ul></ul>
        </div>
        <div class="styles" id='page-elements-view_style'></div>
    </div>
</template>
<script>

    import '../styles/element.css';
    import $$ from 'image2d';

    export default {
        mounted() {
            this.showStyle(document.getElementsByTagName('html')[0]);
            this.doit(document.getElementsByTagName('html'), this.$document.getElementById('page-elements-view_element'));
        },
        methods: {
            getTemplate(el) {

                // 文本结点
                if (el.nodeType == '1') {
                    let template = "<span style='white-space:nowrap'><i style='color:#183691'>&lt;" + el.nodeName + "</i>";
                    for (let i = 0; i < el.attributes.length; i++) {
                        template += " <i style='color:#0086B3'>" + el.attributes[i].nodeName + "='</i><i style='color:#905'>" + el.attributes[i].nodeValue + "</i><i tyle='color:#0086B3'>'</i>";
                    }
                    return template += "&gt;</span><ul></ul><span><i style='color:#183691'>&lt/" + el.nodeName + "&gt</i></span>";
                }

                // 文本结点
                else if (el.nodeType == '3') {
                    return "<i style='color:gray'>" + el.textContent + "</i>";
                }

                // 别的直接忽略了，因为空间不足，无意义的信息不显示

            },
            showStyle(el) {

                let styles = $$(el).css(), template = "";

                // 拼接样式
                template += "<ul>"
                for (let i = 0; i < styles.length; i++) {
                    template += "<li><i style='color:red'>" + styles[i] + "</i>=<i style='color:green'>" + styles[styles[i]] + "</i></li>";
                }

                this.$document.getElementById('page-elements-view_style').innerHTML = template + "</ul>";
            },
            doit(targetEls, mountEl) {

                // 判断是否已经打开

                // 如果已经打开，直接关闭即可
                if (mountEl.getAttribute('isOpen') == 'yes') {
                    mountEl.setAttribute('isOpen', 'no');
                    return;
                }

                // 如果打开过
                if (mountEl.getAttribute('hadLoad') == 'yes') {
                    mountEl.setAttribute('isOpen', 'yes');
                    return;
                }

                mountEl.setAttribute('isOpen', 'yes');
                mountEl.setAttribute('hadLoad', 'yes');

                // 不然就是第一次打开，需要解析
                let template = "";
                for (let i = 0; i < targetEls.length; i++) {
                    template += "<li>" + this.getTemplate(targetEls[i]) + "</li>";
                }

                let ulDom = $$('ul', mountEl);
                ulDom[0].innerHTML = template;
                let lis = $$('li', ulDom[0]);

                for (let i = 0; i < lis.length; i++) {
                    $$('span', lis[i]).bind('click', event => {
                        this.showStyle(targetEls[i]);
                        this.doit(targetEls[i].childNodes, lis[i]);
                    });
                };

            }
        }
    };
</script>
<style>
    div.view>div {
        height: calc(50vh - 20px);
        overflow: auto;
        width: 100vw;
    }

    div.view>div.element {
        background-color: white;
    }
</style>